options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Aplicacion
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '44100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [71, 230]
    rotation: 0
    state: true
- name: audio_sink_0_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'False'
    samp_rate: '44100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1068, 308]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [274, 191]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [372, 203]
    rotation: 0
    state: true
- name: blocks_wavfile_source_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: C:\Users\scsan\Documents\UIS\2024-2\Comunicaciones 2\Fase1\korsakov_bumblebee.wav
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [31, 159]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass blk(gr.sync_block):\n    def __init__(self):\n\
      \        gr.sync_block.__init__(\n            self,\n            name='e_Diff',\
      \  # Nombre del bloque en GRC\n            in_sig=[np.float32],\n          \
      \  out_sig=[np.float32]\n        )\n        self.prev_value = 0.0  # Almacena\
      \ el valor anterior\n\n    def work(self, input_items, output_items):\n    \
      \    x = input_items[0]\n        y = output_items[0]\n        N = len(x)\n\n\
      \        # Concatenar el valor anterior con la se\xF1al actual\n        concatenated\
      \ = np.concatenate(([self.prev_value], x))\n        # Calcular la diferencia\n\
      \        diff = np.diff(concatenated)\n        # Asignar al buffer de salida\n\
      \        y[:] = diff\n        # Actualizar el valor anterior\n        self.prev_value\
      \ = x[-1]\n\n        return N"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('e_Diff', 'blk', [], [('0', 'float', 1)], [('0', 'float', 1)], '',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [691, 311]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass blk(gr.sync_block):\n    def __init__(self,\
      \ window_size=5):  # Tama\xF1o de la ventana ajustable\n        gr.sync_block.__init__(\n\
      \            self,\n            name=\"e_MovingAverage\",  # Nombre del bloque\n\
      \            in_sig=[np.float32],\n            out_sig=[np.float32]\n      \
      \  )\n        self.window_size = window_size\n        self.buffer = np.zeros(self.window_size)\
      \  # Buffer circular\n        self.index = 0\n        self.sum = 0.0\n\n   \
      \ def work(self, input_items, output_items):\n        x = input_items[0]\n \
      \       y = output_items[0]\n        N = len(x)\n\n        for i in range(N):\n\
      \            # Actualizar la suma eliminando el valor m\xE1s antiguo y a\xF1\
      adiendo el nuevo\n            self.sum -= self.buffer[self.index]\n        \
      \    self.sum += x[i]\n            # Actualizar el buffer\n            self.buffer[self.index]\
      \ = x[i]\n            # Calcular el promedio\n            y[i] = self.sum /\
      \ self.window_size\n            # Mover el \xEDndice circularmente\n       \
      \     self.index = (self.index + 1) % self.window_size\n\n        return N\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    window_size: '10'
  states:
    _io_cache: ('e_MovingAverage', 'blk', [('window_size', '5')], [('0', 'float',
      1)], [('0', 'float', 1)], '', ['window_size'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [795, 307]
    rotation: 0
    state: true
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass blk(gr.sync_block):\n    \n    def __init__(self):\
      \  # only default arguments here\n        gr.sync_block.__init__(\n        \
      \    self,\n            name=\"e_Acum\",  # will show up in GRC\n          \
      \  in_sig=[np.float32],\n            out_sig=[np.float32]\n        )\n     \
      \   self.accumulated_value = 0.0  # Inicializamos la acumulaci\xF3n en 0\n\n\
      \    def work(self, input_items, output_items):\n        x = input_items[0]\
      \  # Se\xF1al de entrada.\n        y0 = output_items[0]  # Se\xF1al acumulada\n\
      \        \n        # Acumular la se\xF1al y mantener el estado entre llamadas\n\
      \        y0[:] = np.cumsum(x) + self.accumulated_value\n        self.accumulated_value\
      \ = y0[-1]  # Actualizar la acumulaci\xF3n para la pr\xF3xima llamada\n    \
      \    \n        return len(x)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('e_Acum', 'blk', [], [('0', 'float', 1)], [('0', 'float', 1)], '',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [959, 312]
    rotation: 0
    state: true
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: '1500'
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_fff
    width: '1000'
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [514, 259]
    rotation: 0
    state: true
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: float
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [699, 40]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [698, 162]
    rotation: 0
    state: true

connections:
- [analog_noise_source_x_0, '0', blocks_add_xx_0, '1']
- [blocks_add_xx_0, '0', blocks_throttle_0, '0']
- [blocks_throttle_0, '0', low_pass_filter_0, '0']
- [blocks_throttle_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_throttle_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_wavfile_source_0, '0', blocks_add_xx_0, '0']
- [epy_block_0, '0', epy_block_1, '0']
- [epy_block_1, '0', epy_block_2, '0']
- [epy_block_2, '0', audio_sink_0_0, '0']
- [low_pass_filter_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
